#!/bin/sh
#
# Automatically adds branch name and time spent to every commit message.
#

# Finds the source of this file where ever it is located on the system. Even through symlinks
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  SOURCE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$SOURCE_DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SOURCE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Get the branch name
BRANCH=$(git branch | grep '*' | sed 's/* //')

# Get the whole commit message
MESSAGE=$(cat "$1" | sed '/^#.*/d')

runGitCommitMsg() {
	java -cp "$SOURCE_DIR" GitCommitMsg "$BRANCH" "$MESSAGE"
}

compileGitCommitMsg() {
    javac "$SOURCE_DIR"/GitCommitMsg.java
}

exitStatus() {
    if [ $1 -eq 1 ]; then
        echo "You have entered an invalid time string.\n\n"
        echo "Please make sure that there is only one space between 'work' and the time.\n\n"
        echo "Please also make sure the time is formatted properly and goes Days Hours Minutes.\n\n"
        echo "You do not have to add days or hours if you haven't spent that long on them, but you cannot add days after hours or hours after minutes.\n\n"
        exit 1
    else
        exit 0
    fi
}

  if [ ! which java >/dev/null 2>&1 ]; then
    echo "Java Runtime is not installed. Please install JRE"
    exit 1
  fi

  if [ ! which javac >/dev/null 2>&1 ]; then
    echo "Java Development Kit is not installed. Please install JDK"
    exit 1
  fi

  if [ -e "$SOURCE_DIR"/GitCommitMsg.class ];then
      runGitCommitMsg > "$1"
      exitStatus $?

  else
      compileGitCommitMsg # Compile the java file since it isn't compiled or doens't exist
      runGitCommitMsg > "$1"
      exitStatus $?
  fi

exit 255 # Exiting abnormally. Shouldn't be here as we exit in the above statements